\hypertarget{features_8cpp}{}\doxysection{features.\+cpp File Reference}
\label{features_8cpp}\index{features.cpp@{features.cpp}}


complete features file (header, and feature body).  


{\ttfamily \#include $<$iostream$>$}\newline
{\ttfamily \#include $<$cmath$>$}\newline
{\ttfamily \#include $<$vector$>$}\newline
{\ttfamily \#include $<$unordered\+\_\+map$>$}\newline
{\ttfamily \#include $<$fstream$>$}\newline
{\ttfamily \#include $<$deque$>$}\newline
{\ttfamily \#include \char`\"{}features.\+h\char`\"{}}\newline
{\ttfamily \#include \char`\"{}struct.\+h\char`\"{}}\newline
Include dependency graph for features.\+cpp\+:
% FIG 0
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \mbox{\hyperlink{features_8cpp_aea37dcd9b14ed94e11c268b0e1b3a9ab}{service\+\_\+cmd}} (std\+::string \&input, std\+::string \&output, int argc, char $\ast$argv\mbox{[}$\,$\mbox{]})
\begin{DoxyCompactList}\small\item\em Feature assign a proper params to variables input and output. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{features_8cpp_a1bcf93ef20eb0314db1a888f324b60c3}{read\+\_\+data}} (std\+::unordered\+\_\+map$<$ std\+::string, \mbox{\hyperlink{structvertex}{vertex}} $>$ \&cities, std\+::string input)
\begin{DoxyCompactList}\small\item\em Feature reads a data from a data file and writes it to the unordered map. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{features_8cpp_a6ecbb046af671a80e7269ee7a8ce931b}{Dijkstra}} (std\+::unordered\+\_\+map$<$ std\+::string, \mbox{\hyperlink{structvertex}{vertex}} $>$ \&cities, std\+::vector$<$ std\+::string $>$ \&unavailable)
\begin{DoxyCompactList}\small\item\em The feature executes the Dijkstra algorithm. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{features_8cpp_a9397a43c038cf5c0450b0fd73f01af63}{typing\+\_\+route}} (std\+::unordered\+\_\+map$<$ std\+::string, \mbox{\hyperlink{structvertex}{vertex}} $>$ cities, std\+::string center, std\+::vector$<$ std\+::string $>$ \&unavailable, std\+::string output)
\begin{DoxyCompactList}\small\item\em The feature sorts the cities and previous citis, then the feature saves the program result to the new create file. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{features_8cpp_a6ecbb046af671a80e7269ee7a8ce931b}\label{features_8cpp_a6ecbb046af671a80e7269ee7a8ce931b}} 
\index{features.cpp@{features.cpp}!Dijkstra@{Dijkstra}}
\index{Dijkstra@{Dijkstra}!features.cpp@{features.cpp}}
\doxysubsubsection{\texorpdfstring{Dijkstra()}{Dijkstra()}}
{\footnotesize\ttfamily void Dijkstra (\begin{DoxyParamCaption}\item[{std\+::unordered\+\_\+map$<$ std\+::string, \mbox{\hyperlink{structvertex}{vertex}} $>$ \&}]{cities,  }\item[{std\+::vector$<$ std\+::string $>$ \&}]{unavailable }\end{DoxyParamCaption})}

Good to know, that at the beginning of the program\+:


\begin{DoxyItemize}
\item The city which was choosen the center is assigned the value zero. Whereas all other cities is assigned the distance variable equal to a maximal posible value;
\item Every city includes a bool value equal to \char`\"{}false\char`\"{} in the structure variable called \char`\"{}visited\char`\"{}, (The value \char`\"{}false\char`\"{} means that given city hasn\textquotesingle{}t been visited by algorithm .~\newline
~\newline
 The algorithm executuion\+:~\newline
 1) The closest unvisited city (from center) is serached and saved to a variable called \char`\"{}current\char`\"{};~\newline
2) The routes from center to all other cities are cheacked, If the distance are shorter than current saved way, the distance is overwritten and city from variable \char`\"{}current\char`\"{} are assigned to structure variable \char`\"{}previaus\char`\"{};~\newline
3) Then city from the variable \char`\"{}current\char`\"{} is marked as visited, and value true is assigned to variable \char`\"{}visited\char`\"{} of structere given city;~\newline
4) The points from 1 to 3 are executed as many time as there are saved a cities in the container (unordered\+\_\+map);~\newline
5) The unvisited cities are saved in the vector called \char`\"{}unavailable\char`\"{}.
\end{DoxyItemize}


\begin{DoxyParams}{Parameters}
{\em cities} & The unordered map, there are saved the cities structures, with information about a given cities. \\
\hline
{\em unavailable} & The cities, which haven\textquotesingle{}t got any route connecting to the center. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{features_8cpp_source_l00088}{88}} of file \mbox{\hyperlink{features_8cpp_source}{features.\+cpp}}.

\mbox{\Hypertarget{features_8cpp_a1bcf93ef20eb0314db1a888f324b60c3}\label{features_8cpp_a1bcf93ef20eb0314db1a888f324b60c3}} 
\index{features.cpp@{features.cpp}!read\_data@{read\_data}}
\index{read\_data@{read\_data}!features.cpp@{features.cpp}}
\doxysubsubsection{\texorpdfstring{read\_data()}{read\_data()}}
{\footnotesize\ttfamily void read\+\_\+data (\begin{DoxyParamCaption}\item[{std\+::unordered\+\_\+map$<$ std\+::string, \mbox{\hyperlink{structvertex}{vertex}} $>$ \&}]{cities,  }\item[{std\+::string}]{input }\end{DoxyParamCaption})}

First, Data are saved to proper structures ~\newline
If the structures don\textquotesingle{}t exist then the feature creates them.~\newline
Second, Structures are saved to the unordered map.


\begin{DoxyParams}{Parameters}
{\em cities} & unordered map, include structures with a information about cities from the database \\
\hline
{\em input} & the variable includes a file name with input data. \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{features_8cpp_source_l00048}{48}} of file \mbox{\hyperlink{features_8cpp_source}{features.\+cpp}}.

\mbox{\Hypertarget{features_8cpp_aea37dcd9b14ed94e11c268b0e1b3a9ab}\label{features_8cpp_aea37dcd9b14ed94e11c268b0e1b3a9ab}} 
\index{features.cpp@{features.cpp}!service\_cmd@{service\_cmd}}
\index{service\_cmd@{service\_cmd}!features.cpp@{features.cpp}}
\doxysubsubsection{\texorpdfstring{service\_cmd()}{service\_cmd()}}
{\footnotesize\ttfamily void service\+\_\+cmd (\begin{DoxyParamCaption}\item[{std\+::string \&}]{input,  }\item[{std\+::string \&}]{output,  }\item[{int}]{argc,  }\item[{char $\ast$}]{argv\mbox{[}$\,$\mbox{]} }\end{DoxyParamCaption})}

Param \char`\"{}-\/i\char`\"{} inform the feature that a next argument will be assign to the variable \char`\"{}input\char`\"{}. The program will do similar with a param \char`\"{}-\/o\char`\"{}, and the variable \char`\"{}output\char`\"{}.


\begin{DoxyParams}{Parameters}
{\em input} & the variable includes a input file name with data \\
\hline
{\em output} & the variable includes output file name with a program result \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{features_8cpp_source_l00026}{26}} of file \mbox{\hyperlink{features_8cpp_source}{features.\+cpp}}.

\mbox{\Hypertarget{features_8cpp_a9397a43c038cf5c0450b0fd73f01af63}\label{features_8cpp_a9397a43c038cf5c0450b0fd73f01af63}} 
\index{features.cpp@{features.cpp}!typing\_route@{typing\_route}}
\index{typing\_route@{typing\_route}!features.cpp@{features.cpp}}
\doxysubsubsection{\texorpdfstring{typing\_route()}{typing\_route()}}
{\footnotesize\ttfamily void typing\+\_\+route (\begin{DoxyParamCaption}\item[{std\+::unordered\+\_\+map$<$ std\+::string, \mbox{\hyperlink{structvertex}{vertex}} $>$}]{cities,  }\item[{std\+::string}]{center,  }\item[{std\+::vector$<$ std\+::string $>$ \&}]{unavailable,  }\item[{std\+::string}]{output }\end{DoxyParamCaption})}

1) A queue is created, then next city and previous cities are saved to the first position the queue until the center is saved;~\newline
2) Then, Route from the center, through previous cities and finished on the last city (saved in the variable \char`\"{}i\char`\"{}), the distence information is saved in the end;\textbackslash{} 3) The points from 1 to 2 are performed for each city from the unordered map;~\newline
4) All cities which haven\textquotesingle{}t got conected with the center are saved type in to the file with a short information (about not connected);~\newline
5) The file is closed.~\newline
 
\begin{DoxyParams}{Parameters}
{\em cities} & The unordered map, there are saved the cities structures, with information about a given cities. \\
\hline
{\em center} & A city that chose as the center. \\
\hline
{\em unavailable} & The cities, which haven\textquotesingle{}t got any route connecting to the center. \\
\hline
{\em output} & the variable includes output file name with a program result \\
\hline
\end{DoxyParams}


Definition at line \mbox{\hyperlink{features_8cpp_source_l00135}{135}} of file \mbox{\hyperlink{features_8cpp_source}{features.\+cpp}}.

